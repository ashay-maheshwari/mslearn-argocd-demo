apiVersion: apps/v1
kind: Deployment
metadata:
  name: productservice
spec:
  selector: # Define the wrapping strategy
    matchLabels: # Match all pods with the defined labels
      app: productservice # Labels follow the `name: value` template
  template: # This is the template of the pod inside the deployment
    metadata:
      labels:
        app: productservice
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - image: productionclusterregistry.azurecr.io/products:1547aa3d2f168d85189b560a8ff80f2f20c274fd
          name: productservice
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 250m
              memory: 256Mi
          ports:
            - containerPort: 8080
              name: http
          volumeMounts:
            - name: productservice-storage
              mountPath: /data  # Path inside the container where the volume will be mounted
      volumes:
        - name: productservice-storage
          persistentVolumeClaim:
            claimName: productservice-pvc          
---
apiVersion: v1
kind: Service
metadata:
  name: eshop-backend
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: productservice
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: eshop-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: / # This defines an ingress rule to route traffic to the front end store service
        pathType: Prefix
        backend:
          service:
            name: eshop-website
            port:
              number: 80
      - path: /images/ # This defines an ingress rule to route image requests to the backend product service
        pathType: Prefix
        backend:
          service:
            name: eshop-backend
            port:
              number: 80
